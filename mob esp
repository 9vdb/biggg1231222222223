--Settings--
local ESP = {
	Enabled = false,
	Boxes = true,
	BoxShift = CFrame.new(0,-1.5,0),
	BoxSize = Vector3.new(4,6,0),
	Color = Color3.fromRGB(255, 170, 0),
	HighlightColor = Color3.new(1,1,1),
	HighlightEnabled = false,
	FaceCamera = false,
	Names = true,
	Thickness = 2,
	AttachShift = 1,
	Bars = true,
	GlobalBars = {},
	HrpName = "HumanoidRootPart",
	ScreenScale = 1,

	Objects = setmetatable({}, {__mode="kv"}),
	Overrides = {}
}
getgenv().shared = getgenv().shared or {}
getgenv().shared.ESP = ESP

--Declarations--
local cam = workspace.CurrentCamera
local mobFolder = workspace:WaitForChild("Enemies")
local mouse = game:GetService("Players").LocalPlayer:GetMouse()

local V3new = Vector3.new
local function WorldToViewportPoint(...)
	local a,b = cam:WorldToViewportPoint(...)
	a = Vector3.new(a.X * ESP.ScreenScale, a.Y * ESP.ScreenScale, a.Z)
	return a,b
end

--Functions--
local function Draw(obj, props)
	local new = Drawing.new(obj)
	props = props or {}
	for i,v in pairs(props) do
		new[i] = v
	end
	return new
end

function ESP.GetFOV()
	local screenSize = workspace.CurrentCamera.ViewportSize
	return math.max(math.min(screenSize.X * ESP.ScreenScale, screenSize.Y * ESP.ScreenScale)/2, 400)
end

function ESP.FOVCircle(radius)
	local FOVCircle = Drawing.new("Circle")
	FOVCircle.Radius = radius
	FOVCircle.Color = Color3.fromRGB(255, 170, 0)
	FOVCircle.Thickness = 3
	FOVCircle.Filled = false

	local CircleTbl = {
		Update = function()
			FOVCircle.Position = Vector2.new(mouse.X * ESP.ScreenScale, mouse.Y * ESP.ScreenScale+36)
		end
	}
	table.insert(ESP.Objects, CircleTbl)
	return {Drawing = FOVCircle, Tbl = CircleTbl, Update = CircleTbl.Update}
end

function ESP:RegisterHighlight(GetTarget)
	game:GetService("RunService").Stepped:Connect(function()
		if not ESP.HighlightEnabled or not ESP.Enabled then return end
		local target = GetTarget()
		if target then
			ESP.Highlighted = target
		else
			ESP.Highlighted = nil
		end
	end)
end

--Box Object Base
local boxBase = {}
boxBase.__index = boxBase

function boxBase:Remove()
	ESP.Objects[self.Object] = nil
	for i,v in pairs(self.Components) do
		v.Visible = false
		v:Remove()
		self.Components[i] = nil
	end
end

function boxBase:Update()
	if not self.PrimaryPart then
		return self:Remove()
	end

	local color = self.Color or ESP.Color
	if ESP.Highlighted == self.Object then
		color = ESP.HighlightColor
	end

	local cf = self.PrimaryPart.CFrame
	if ESP.FaceCamera then
		cf = CFrame.new(cf.p, cf.p - cam.CFrame.lookVector)
	end
	local size = self.Size
	local locs = {
		TopLeft = cf * ESP.BoxShift * CFrame.new(size.X/2,size.Y/2,0),
		TopRight = cf * ESP.BoxShift * CFrame.new(-size.X/2,size.Y/2,0),
		BottomLeft = cf * ESP.BoxShift * CFrame.new(size.X/2,-size.Y/2,0),
		BottomRight = cf * ESP.BoxShift * CFrame.new(-size.X/2,-size.Y/2,0),
		TagPos = cf * ESP.BoxShift * CFrame.new(0,size.Y/2,0),
		Torso = cf * ESP.BoxShift
	}

	local TopLeft, Vis1
	local BottomLeft, Vis3
	if ESP.Boxes then
		TopLeft, Vis1 = WorldToViewportPoint(cam, locs.TopLeft.p)
		local TopRight, Vis2 = WorldToViewportPoint(cam, locs.TopRight.p)
		BottomLeft, Vis3 = WorldToViewportPoint(cam, locs.BottomLeft.p)
		local BottomRight, Vis4 = WorldToViewportPoint(cam, locs.BottomRight.p)

		if self.Components.Quad then
			if Vis1 or Vis2 or Vis3 or Vis4 then
				self.Components.Quad.Visible = true
				self.Components.Quad.PointA = Vector2.new(TopRight.X, TopRight.Y)
				self.Components.Quad.PointB = Vector2.new(TopLeft.X, TopLeft.Y)
				self.Components.Quad.PointC = Vector2.new(BottomLeft.X, BottomLeft.Y)
				self.Components.Quad.PointD = Vector2.new(BottomRight.X, BottomRight.Y)
				self.Components.Quad.Color = color
			else
				self.Components.Quad.Visible = false
			end
		end
	else
		self.Components.Quad.Visible = false
	end

	if ESP.Names then
		local TagPos, Vis5 = WorldToViewportPoint(cam, locs.TagPos.p)
		if Vis5 then
			self.Components.Name.Visible = true
			self.Components.Name.Position = Vector2.new(TagPos.X, TagPos.Y)
			self.Components.Name.Text = self.Name
			self.Components.Name.Color = color
		else
			self.Components.Name.Visible = false
		end
	else
		self.Components.Name.Visible = false
	end

	if ESP.Bars then
		for i,v in pairs(self.Bars) do
			v.Components.Bar.Visible = false
			v.Components.BarBackground.Visible = false
		end
	end

	if ESP.Tracers then
		local TorsoPos, Vis6 = WorldToViewportPoint(cam, locs.Torso.p)
		if Vis6 then
			self.Components.Tracer.Visible = true
			self.Components.Tracer.From = Vector2.new(TorsoPos.X, TorsoPos.Y)
			self.Components.Tracer.To = Vector2.new(cam.ViewportSize.X*ESP.ScreenScale/2, cam.ViewportSize.Y*ESP.ScreenScale/ESP.AttachShift)
			self.Components.Tracer.Color = color
		else
			self.Components.Tracer.Visible = false
		end
	end
end

--Add Mob
function ESP:Add(obj, options)
	if not obj.Parent and not options.RenderInNil then
		return warn("[Mob ESP]:", obj, "has no parent")
	end

	local box = setmetatable({
		Name = options.Name or obj.Name,
		Type = "Box",
		Color = options.Color or ESP.Color,
		Size = options.Size or ESP.BoxSize,
		Object = obj,
		PrimaryPart = options.PrimaryPart or obj:FindFirstChild(ESP.HrpName) or obj:FindFirstChildWhichIsA("BasePart"),
		Components = {},
		Temporary = options.Temporary,
		RenderInNil = options.RenderInNil,
		Bars = {}
	}, boxBase)

	if self.Objects[obj] then
		self.Objects[obj]:Remove()
	end

	box.Components["Quad"] = Draw("Quad", {
		Thickness = self.Thickness,
		Color = box.Color,
		Filled = false,
		Visible = self.Enabled and self.Boxes
	})
	box.Components["Name"] = Draw("Text", {
		Text = box.Name,
		Color = box.Color,
		Center = true,
		Outline = true,
		Size = 19,
		Visible = self.Enabled and self.Names
	})
	box.Components["Tracer"] = Draw("Line", {
		Thickness = ESP.Thickness,
		Color = box.Color,
		Filled = false,
		Visible = self.Enabled
	})

	self.Objects[obj] = box

	obj.AncestryChanged:Connect(function(_, parent)
		if parent == nil then box:Remove() end
	end)
	obj:GetPropertyChangedSignal("Parent"):Connect(function()
		if obj.Parent == nil then box:Remove() end
	end)

	local hum = obj:FindFirstChildOfClass("Humanoid")
	if hum then
		hum.Died:Connect(function() box:Remove() end)
	end

	return box
end

--Add All Mobs From Folder
for _, mob in pairs(mobFolder:GetChildren()) do
	ESP:Add(mob, {PrimaryPart = mob:FindFirstChild(ESP.HrpName)})
end

mobFolder.ChildAdded:Connect(function(mob)
	ESP:Add(mob, {PrimaryPart = mob:FindFirstChild(ESP.HrpName)})
end)

--Update Loop
game:GetService("RunService").RenderStepped:Connect(function()
	cam = workspace.CurrentCamera
	for i,v in pairs(ESP.Objects) do
		if v.Update then
			local s,e = pcall(v.Update, v)
			if not s then warn("[Mob ESP Error]", e, v.Object:GetFullName()) end
		end
	end
end)

return ESP
